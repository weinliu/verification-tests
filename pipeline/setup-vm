#!/bin/bash
#usage: setup-vm goc48 ${WORKBUILDDIR} ${WORKSPACE}/tool_dir
#get oc client
echo $1 $2 $3
NODELABEL=$1
WORKBUILDDIR=$2
WORKDIR=$3
mkdir -p $WORKDIR
CURRENTDIR=`pwd`

http_proxy_tmp=${http_proxy}
https_proxy_tmp=${https_proxy}
if [[ "x${http_proxy}x" != "xx" ]] || [[ "x${https_proxy}x" != "xx" ]]; then
    echo "unset http_proxy https_proxy"
    unset http_proxy https_proxy
fi

sudo rm -rf /tmp/fixture-testdata-*
sudo rm -rf /tmp/ocp-*
rm -rf /tmp/*
podman rm -a -f
podman rmi -a -f
sudo rm -f /usr/bin/oc /usr/local/bin/oc /usr/local/bin/opm /usr/local/bin/initializer /usr/local/bin/configmap-server /usr/local/bin/registry-server /usr/bin/*operator*
export no_proxy=quay.io

cd /etc/pki/ca-trust/source/anchors
sudo curl -O --insecure https://certs.corp.redhat.com/certs/Current-IT-Root-CAs.pem
sudo curl -O --insecure https://engineering.redhat.com/Eng-CA.crt
sudo update-ca-trust extract
cd $WORKDIR

if echo $NODELABEL | grep -E '^goc([0-9]{2,3})$'; then
  NIGHTLYFLAG=$(echo $NODELABEL | tr -dc '0-9')
  echo $NIGHTLYFLAG
else
  echo "the node label is not correct. For example, goc45"
  exit 1
fi

sudo rm -f /etc/yum.repos.d/redhat_offcial.repo /etc/yum.repos.d/localdev-rhel-8-baseos-rpms.repo /etc/yum.repos.d/google-cloud-sdk.repo /etc/yum.repos.d/azure-cli.repo
sudo cp -f ${WORKBUILDDIR}/pipeline/repo-file/rhel9.3-baseos.repo /etc/yum.repos.d/rhel9.3-baseos.repo
sudo ls -lrt /etc/yum.repos.d/
sudo yum-config-manager --enable rhel9.3-baseos
sudo yum remove 'origin*.x86_64' 'atomic-openshift*.x86_64' 'openshift-clients*.x86_64' -y
#sudo yum -y install openshift-clients
sudo yum -y install jq patch docker sos zip unzip
sudo yum clean all -y
pip3 install requests
sos -h
#get oc client
echo "------------------get oc------------------------"
echo "get latest oc"
unset http_proxy https_proxy
curl -s -k -L https://mirror2.openshift.com/pub/openshift-v4/x86_64/clients/ocp-dev-preview/candidate-4.17/openshift-client-linux-amd64-rhel9.tar.gz -o oc-linux.tar.gz

tar -xzvf oc-linux.tar.gz
echo "get oc-linux.tar.gz successfully"
rm -f oc-linux.tar.gz
sudo mv oc /usr/local/bin/oc
if [[ "x${http_proxy_tmp}x" != "xx" ]] || [[ "x${https_proxy_tmp}x" != "xx" ]]; then
    echo "set env http_proxy https_proxy"
    export http_proxy=${http_proxy_tmp}
    export https_proxy=${https_proxy_tmp}
fi
echo "oc version:"
oc version
retVal=$?
if [ $retVal -ne 0 ]; then
    echo "install oc failed"
    exit 1
fi

echo "------------------get oc Done------------------------"

#get operatorSDK
#INSTALL_TOOLS Option filling rules
#If it contains a number, pull the PR from the downstream code. If it contains the string "upstream", pull the PR from the upstream code.
#example: operatorSDK:350 ; operatorSDK:upstream6619
if echo $INSTALL_TOOLS | grep -i 'operatorSDK' > /dev/null; then
    unset http_proxy https_proxy
    echo "------------------get operatorSDK------------------------"
    mkdir ${WORKSPACE}/osdk
    BUILD_CMD="make build"
    PR=""
    array=(${INSTALL_TOOLS//;/ })  
    for tool_name_index in ${array[@]}
    do
        if echo $tool_name_index | grep -i 'operatorSDK' > /dev/null; then
            echo $tool_name_index
            echo "get operatorSDK PR"
            PR=`echo $INSTALL_TOOLS | tr -cd "[0-9]"`
            echo "PR is ${PR}"
        fi
    done

    if [[ "x${PR}x" != "xx" ]]; then
        UPSTREAM=`echo $INSTALL_TOOLS | grep "upstream"`
        if [ "x${UPSTREAM}x" != "xx" ]; then
            echo "get upstream code from PR ${PR} "
            git clone https://github.com/operator-framework/operator-sdk.git ${WORKSPACE}/osdk
            cd ${WORKSPACE}/osdk
            git remote add upstream https://github.com/operator-framework/operator-sdk.git
            git fetch upstream pull/${PR}/head:upstreamPR
            git checkout upstreamPR
            git status
        else
            echo "get downstream code from PR ${PR} "
            git clone https://github.com/openshift/ocp-release-operator-sdk.git ${WORKSPACE}/osdk
            cd ${WORKSPACE}/osdk
            git remote add downstream https://github.com/openshift/ocp-release-operator-sdk.git
            git fetch downstream pull/${PR}/head:downstreamPR
            git checkout downstreamPR
            git status
            BUILD_CMD="make build"
        fi
    else
        #if [ "${JENKINS_AGENT}" == 'goc417' ]; then
        #    git clone --depth=1 git@github.com:operator-framework/operator-sdk.git ${WORKSPACE}/osdk --branch master
        #else
        #BRANCH="release-${NIGHTLYFLAG:0:1}.${NIGHTLYFLAG:1}"
        #BUILD_CMD="make -f ci/prow.Makefile patch build"
        #git clone --depth=1 git@github.com:openshift/ocp-release-operator-sdk.git ${WORKSPACE}/osdk --branch ${BRANCH}
        #fi
        #get operatorsdk from upstream and upstreamversion is 1.39.1 for ocp4.19
        curl -s -k -L https://codeload.github.com/operator-framework/operator-sdk/tar.gz/refs/tags/v1.39.1 -o osdk.tar.gz
        mv osdk.tar.gz ${WORKSPACE}/osdk/
        cd ${WORKSPACE}/osdk/
        tar -xzvf ${WORKSPACE}/osdk/osdk.tar.gz
        echo "get osdk.tar.gz successfully"
        rm -f ${WORKSPACE}/osdk/osdk.tar.gz
    fi
    cd ${WORKSPACE}/osdk/operator-sdk-1.39.1
    echo "buid command is [${BUILD_CMD}]"
    eval "${BUILD_CMD}"
    ls -lrt build/
    mv -f build/* $WORKDIR
    rm -fr ../osdk
    chown -R cloud-user:cloud-user $WORKDIR
    operator-sdk version
    cd $WORKDIR
    echo "------------------get operatorSDK Done------------------------"
else
    echo "skip get operatorSDK"
fi

#get hypershift
if echo $INSTALL_TOOLS | grep -i 'hypershift' > /dev/null; then
    unset http_proxy https_proxy
    echo "------------------get hypershift------------------------"
    oc image extract quay.io/openshifttest/hypershift-client:latest --file=/hypershift
    mv -f hypershift $WORKDIR
    chmod 755 $WORKDIR/hypershift
    chown -R cloud-user:cloud-user $WORKDIR
    hypershift -h
else
    echo "skip get hypershift"
fi


#get opm client
if echo $INSTALL_TOOLS | grep -i 'opm' > /dev/null; then
    echo "------------------get opm------------------------"
    echo "get latest opm"
    echo "set env http_proxy https_proxy"
    unset http_proxy https_proxy
    BRANCH="release-${NIGHTLYFLAG:0:1}.${NIGHTLYFLAG:1}"
    mkdir ${WORKSPACE}/operator-framework-olm
    git clone --depth=1 git@github.com:openshift/operator-framework-olm.git ${WORKSPACE}/operator-framework-olm --branch ${BRANCH}
    cd ${WORKSPACE}/operator-framework-olm
    make bin/opm
    mv -f bin/opm $WORKDIR
    cd ${WORKSPACE}
    echo "opm version:"
    opm version
    retVal=$?
    if [ $retVal -ne 0 ]; then
        echo "get opm failed"
        exit 1
    fi
fi

rm -rf ${XDG_RUNTIME_DIR}/containers/auth.json
cp -f ~/.docker/auto/config.json ~/.docker
podman login quay.io
cd $CURRENTDIR
output=`sudo podman ps -a`
if [[ $output == *"0.0.0.0:5000"* ]]; then
  echo "registry is up"
else
  echo "run /home/cloud-user/jian/auto_run_registry.sh"
  /home/cloud-user/jian/auto_run_registry.sh
fi

if [ ! -f "/root/kustomize" ]; then
    echo "install kustomize"
    sudo wget "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
    sudo chmod +x install_kustomize.sh
    sudo ./install_kustomize.sh 3.8.7 /root
fi

if [[ "x${http_proxy_tmp}x" != "xx" ]] || [[ "x${https_proxy_tmp}x" != "xx" ]]; then
    echo "set env http_proxy https_proxy"
    export http_proxy=${http_proxy_tmp}
    export https_proxy=${https_proxy_tmp}
fi
