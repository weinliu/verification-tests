#!/bin/bash
#config env for cluster

WORKDIRBASE=$1
BUILD_NUM_FOR_CONF=$2
CONTENT_FOR_CONF=$3
DEFAULT_GCPAUTH_LOCATION="$WORKDIRBASE/internal/config/credentials/gce_v4.json"

if [ "${BUILD_NUM_FOR_CONF}" == "null" ]; then
  BUILD_NUM_FOR_CONF=""
else
  BUILD_NUM_FOR_CONF=${BUILD_NUM_FOR_CONF:4}
fi

FLEXYURLBASE=${JENKINS_URL}"job/ocp-common/job/Flexy-install/"
KUBECONFIG_FILE=""
proxyValue=""
if [ "${CONTENT_FOR_CONF}" != "" ] ; then
  rm -fr handleconfig.py && eval cp -fr ${WORKDIRBASE}"/private/pipeline/handleconfig.py" .
  value=`python3 handleconfig.py -a get -y "${CONTENT_FOR_CONF}" -p environments:ocp4:admin_creds_spec || true `
  if [ "${value}" != "None" ] && [ "${value}" != "failtogetvalue" ] && [ "${value}" != "" ]; then
    KUBECONFIG_FILE=${value}
  else
    echo "there is no kubeconfig or wrong in CONF, please check it !!! and try to config it from flexy"
  fi
  proxyValue=`python3 handleconfig.py -a get -y "${CONTENT_FOR_CONF}" -p environments:ocp4:proxy || true `
  if [ "${proxyValue}" != "None" ] && [ "${proxyValue}" != "failtogetvalue" ] && [ "${proxyValue}" != "" ]; then
    echo "proxyValue is ${proxyValue}"
  else
    echo "cannot get proxy or proxy is empty "
    proxyValue=""
  fi
fi
if [ "${KUBECONFIG_FILE}" != "" ]; then
  echo "the kubeconfig is set directly with CONFIG"
  ck "${KUBECONFIG_FILE}"
  cz "${WORKDIRBASE}"
  if [ "${proxyValue}" != "" ]; then
    echo "set http_proxy https_proxy"
    eval "export ${proxyValue}"
    echo $http_proxy $https_proxy
  fi
else
  echo "the configuration is set from flexy build"
  if [ "${BUILD_NUM_FOR_CONF}" == "" ]; then
    echo "please input FLEXY_BUILD or set kubeconfig in CONF"
    exit 1
  fi
  # configure kubeconfig
  KUBECONFIG_FILE=${FLEXYURLBASE}${BUILD_NUM_FOR_CONF}"/artifact/workdir/install-dir/auth/kubeconfig"
  ck "${KUBECONFIG_FILE}"
  # configure azure authentication script
  # AZURE_AUTH_LOCATION_FILE=${FLEXYURLBASE}${BUILD_NUM_FOR_CONF}"/artifact/workdir/install-dir/terraform.azure.auto.tfvars.json"
  # ret_code=`curl -s -k ${AZURE_AUTH_LOCATION_FILE} -o /dev/null  -w "%{http_code}"`
  # if [ "${ret_code}" == "200" ]; then
  cz "${WORKDIRBASE}"
  # fi
  #config client proxy if necessary
  #export http_proxy= && export https_proxy=
  CLIENT_PROXY_SETTING_SH=${FLEXYURLBASE}${BUILD_NUM_FOR_CONF}"/artifact/workdir/install-dir/client_proxy_setting.sh"
  ret_code=`curl -s -k ${CLIENT_PROXY_SETTING_SH} -o ./client_proxy_setting.sh  -w "%{http_code}" || true `
  if [ "${ret_code}" == "000" ]; then
    echo "there is problem to access jenkins server. sleep 10s and try it again"
    sleep 10
    ret_code=`curl -s -k ${CLIENT_PROXY_SETTING_SH} -o ./client_proxy_setting.sh  -w "%{http_code}" || true `
    if [ "${ret_code}" == "000" ]; then
      echo "there is still problem to access jenkins server. treate it as no proxy to continue the testing"
    fi
  fi
  if [ "${ret_code}" == "200" ]; then
    source ./client_proxy_setting.sh
  elif [ "${ret_code}" == "404" ]; then
    CLIENT_PROXY_SETTING_JSON=${FLEXYURLBASE}${BUILD_NUM_FOR_CONF}"/artifact/workdir/install-dir/client_proxy_setting.json"
    ret_code=`curl -s -k ${CLIENT_PROXY_SETTING_JSON} -o ./client_proxy_setting.json  -w "%{http_code}" || true `
    if [ "${ret_code}" == "000" ]; then
      echo "there is problem to access jenkins server. sleep 10s and try it again"
      sleep 10
      ret_code=`curl -s -k ${CLIENT_PROXY_SETTING_JSON} -o ./client_proxy_setting.json  -w "%{http_code}" || true `
      if [ "${ret_code}" == "000" ]; then
        echo "there is still problem to access jenkins server. treate it as no proxy to continue the testing"
      fi
    fi
    if [ "${ret_code}" == "200" ]; then
      https_proxy_value=`cat ./client_proxy_setting.json | jq -r .https_proxy`
      if [ "${https_proxy_value}" != "null" ]; then
        export https_proxy=${https_proxy_value}
      fi
      http_proxy_value=`cat ./client_proxy_setting.json | jq -r .http_proxy`
      if [ "${http_proxy_value}" != "null" ]; then
        export http_proxy=${http_proxy_value}
      fi
      echo $https_proxy_value $http_proxy_value
    fi
  fi

  #setup bastion information
  CLUSTER_INFO_YAML=${FLEXYURLBASE}${BUILD_NUM_FOR_CONF}"/artifact/workdir/install-dir/cluster_info.yaml"
  ret_code=`curl -s -k ${CLUSTER_INFO_YAML} -o ./cluster_info.yaml  -w "%{http_code}" || true `
  if [ "${ret_code}" == "000" ]; then
    echo "there is problem to access jenkins server to get cluster_info.yaml. sleep 10s and try it again"
    sleep 10
    ret_code=`curl -s -k ${CLUSTER_INFO_YAML} -o ./cluster_info.yaml  -w "%{http_code}" || true `
    if [ "${ret_code}" == "000" ]; then
      echo "there is still problem to access jenkins server to get cluster_info.yaml. treate it as no cluster_info to continue the testing"
    fi
  fi
  if [ "${ret_code}" == "404" ]; then
    echo "there is no cluster_info.yaml provided by installation job. continue to test. if you need it, please contact with installation team about why no file."
  fi
  if [ "${ret_code}" == "200" ]; then
    bastion=`cat ./cluster_info.yaml | jq -r .INSTALLER.BASTION`
    bastion_internal_ip=`cat ./cluster_info.yaml | jq -r .INSTALLER.BASTION_INTERNAL_IP`
    bastion_ssh_user=`cat ./cluster_info.yaml | jq -r .INSTALLER.BASTION_SSH_USER`
    if [ "${bastion}" != "null" ]; then
      export QE_BASTION_PUBLIC_ADDRESS=${bastion}
    fi
    if [ "${bastion_internal_ip}" != "null" ]; then
      export QE_BASTION_PRIVATE_ADDRESS=${bastion_internal_ip}
    fi
    if [ "${bastion_ssh_user}" != "null" ]; then
      export QE_BASTION_SSH_USER=${bastion_ssh_user}
    fi
  fi

  #setup kubeadmin information
  CONSOLE_FULL=${FLEXYURLBASE}${BUILD_NUM_FOR_CONF}"/consoleFull"
  ret_code=`curl -s -k ${CONSOLE_FULL} -o ./consoleFull  -w "%{http_code}" || true `
  if [ "${ret_code}" == "000" ]; then
    echo "there is problem to access jenkins server to get consoleFull. sleep 10s and try it again"
    sleep 10
    ret_code=`curl -s -k ${CONSOLE_FULL} -o ./consoleFull  -w "%{http_code}" || true `
    if [ "${ret_code}" == "000" ]; then
      echo "there is still problem to access jenkins server to get consoleFull. treate it as no consoleFull to continue the testing"
    fi
  fi
  if [ "${ret_code}" == "404" ]; then
    echo "there is no consoleFull provided by installation job. continue to test. if you need it, please contact with installation team about why no file."
  fi
  if [ "${ret_code}" == "200" ]; then
    kubeadmin_passwd=`cat ./consoleFull|grep "Login to the console with user"|awk -F "password: " '{print $2}'| sed 's/\"//g'`
    if [ "W${kubeadmin_passwd}W" != "WW" ]; then
      export QE_KUBEADMIN_PASSWORD=${kubeadmin_passwd}
    fi
  fi

fi
if ! [ -e "$DEFAULT_GCPAUTH_LOCATION" ]; then
    echo "the gce authentication file does not exit"
    exit 1
fi
current=`date "+%Y-%m-%d %H:%M:%S"`
date_str=`echo ${current} | awk -F " " '{print $1}'`
time_str=`echo ${current} | awk -F " " '{print $2}'`
config_name="gce-${date_str}-${time_str}.json"
echo "the gce file is ${config_name}"
cp -fr "$DEFAULT_GCPAUTH_LOCATION" ${config_name}
eval export GOOGLE_APPLICATION_CREDENTIALS="${config_name}"
eval export SSH_CLOUD_PRIV_KEY="${WORKDIRBASE}/internal/config/keys/openshift-qe.pem"
export SSH_CLOUD_PRIV_GCP_USER="${QE_BASTION_SSH_USER:-core}"
export SSH_CLOUD_PRIV_AWS_USER="${QE_BASTION_SSH_USER:-core}"
export SSH_CLOUD_PRIV_AZURE_USER="${QE_BASTION_SSH_USER:-core}"
export GITHUB_TOKEN=`cat /root/github.key || true `
env | grep proxy || true

